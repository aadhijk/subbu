Code:
module four_x_four_multiplier(
    input [3:0] multiplicand,
    input [3:0] multiplier,
    output reg [7:0] product
);
    reg [7:0] partial_products [3:0];
    reg [7:0] temp_product;
    integer i;

    always @* begin
        for (i = 0; i < 4; i = i + 1) begin
            partial_products[i] = multiplier[i] ? (multiplicand << i) : 8'b0;
        end
    end

    always @* begin
        temp_product = 8'b0;
        for (i = 0; i < 4; i = i + 1) begin
            temp_product = temp_product + partial_products[i];
        end
    end

    always @* begin
        product = temp_product;
    end
endmodule



Test Bench:

module four_x_four_multiplier_tb;
    reg [3:0] multiplicand;
    reg [3:0] multiplier;
    wire [7:0] product;

   four_x_four_multiplier uut (
        .multiplicand(multiplicand), 
        .multiplier(multiplier), 
        .product(product)
    );

    initial begin
        multiplicand = 0;
        multiplier = 0;
        #10;
        
        multiplicand = 8'd15; multiplier = 8'd3;         
        #10;
        multiplicand = 8'd14; multiplier = 8'd4;         
        #10;
        multiplicand = 8'd13; multiplier = 8'd5;         
        #10;
        multiplicand = 8'd12; multiplier = 8'd6;         
        #10;
        $finish;
    end
 //initial begin
            // Monitor changes and display them
            //$monitor("At time %t, multiplicand = %b, multiplier = %b, product = %b",
                    // $time, multiplicand, multiplier, product);
        //end     
    
endmodule
