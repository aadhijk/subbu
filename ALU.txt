main program:
module alu(
           input [7:0] A,B,  // ALU 8-bit Inputs                 
           input [3:0] ALU_Sel,// ALU Selection
           input clock,
           output [7:0] ALU_Out, // ALU 8-bit Output
           output CarryOut // Carry Out Flag
    );
    
    reg [7:0] ALU_Result;
    wire [8:0] tmp;
    assign ALU_Out = ALU_Result; // ALU out
    assign tmp = {1'b0,A} + {1'b0,B};
    assign CarryOut = tmp[8]; // Carryout flag
    always @(posedge clock)
    

    begin
        case(ALU_Sel)
    
        4'b0000: // Addition
           ALU_Result = A + B ; 
        4'b0001: // Subtraction
           ALU_Result = A - B ;
        4'b0010: // Multiplication
           ALU_Result = A * B;
        4'b0011: // Division
           ALU_Result = A/B;
        4'b0100: // Logical shift left
           ALU_Result = A<<1;
        4'b0101: // Logical shift right
           ALU_Result = A>>1;
        4'b0110: // Rotate left
           ALU_Result = {A[6:0],A[7]};
        4'b0111: // Rotate right
           ALU_Result = {A[0],A[7:1]};
        4'b1000: //  Logical and 
           ALU_Result = A & B;
        4'b1001: //  Logical or
           ALU_Result = A | B;
        4'b1010: //  Logical xor 
           ALU_Result = A ^ B;
        4'b1011: //  Logical nor
           ALU_Result = ~(A | B);
        4'b1100: // Logical nand 
           ALU_Result = ~(A & B);
        4'b1101: // Logical xnor
           ALU_Result = ~(A ^ B);
        4'b1110: // Greater comparison
           ALU_Result = (A>B)?8'd1:8'd0 ;
        4'b1111: // Equal comparison   
            ALU_Result = (A==B)?8'd1:8'd0 ;
        default: ALU_Result = A + B ; 
        endcase
    
    end
    

endmodule

testbench:
module tb_alu;

  // Inputs
  reg [7:0] A, B;
  reg [3:0] ALU_Sel;
  reg clock;

  // Outputs
  wire [7:0] ALU_Out;
  wire CarryOut;

  // Instantiate ALU module
  alu test_unit(
    .A(A),
    .B(B),
    .clock(clock),
    .ALU_Sel(ALU_Sel),
    .ALU_Out(ALU_Out),
    .CarryOut(CarryOut)
  );

  // Clock generation
  always #5 clock = ~clock;

  // Initial block for testbench stimulus
  initial begin
    // Initialize inputs
    A = 8'h0A;
    B = 4'h02;
    ALU_Sel = 4'h0;
    clock = 0;

    // Apply inputs and clock
    #10;
    
    // Iterate over different ALU_Sel values
    for (i = 0; i <= 15; i = i + 1) 
    begin
      #10;
      ALU_Sel = ALU_Sel + 1;
    end

    // Additional tests
    #10;
    A = 8'hF6;
    B = 8'h0A;
    #10;
    
    // End simulation
    $finish;
  end

endmodule