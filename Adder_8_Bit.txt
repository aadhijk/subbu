Code:

module eight_bit_adder(
input [7:0]A,
input [7:0]B,
input Cin,
output [8:0]S,
output Cout
);
wire C0,C1,C2,C3,C4,C5,C6;
full_adder fa1(A[0],B[0],Cin,S[0],C0);
full_adder fa2(A[1],B[1],C0,S[1],C1);
full_adder fa3(A[2],B[2],C1,S[2],C2);
full_adder fa4(A[3],B[3],C2,S[3],C3);
full_adder fa5(A[4],B[4],C3,S[4],C4);
full_adder fa6(A[5],B[5],C4,S[5],C5);
full_adder fa7(A[6],B[6],C5,S[6],C6);
full_adder fa8(A[7],B[7],C6,S[7],Cout);
assign S[8]=Cout;
endmodule

module full_adder(
    input a,
    input b,
    input c,
    output sum,
    output carry
    );
assign sum = a^b^c;
assign carry = (a&b)|(b&c)|(c&a);
endmodule



Test Bench:

module eight_bit_adder_tb();

reg [7:0]A;
reg [7:0]B;
reg Cin;
wire [8:0]S;
wire Cout;


eight_bit_adder dut(.A(A),.B(B),.Cin(Cin),.S(S),.Cout(Cout));

initial begin
A=8'b11001100;
B=8'b10101010;
Cin=0;
#10

A=8'b01101001;
B=8'b10010110;
Cin=0;
#10

$finish;
end
endmodule