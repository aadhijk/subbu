Code:

module booth_multiplier(X,Y,Z);
input signed  [3:0] X;
input signed  [3:0] Y;
output signed [7:0] Z;

reg [3:0]x; 
reg [3:0]y; 
reg [3:0]acc;
reg signed [8:0] s; 
reg q; 

integer i;
reg [1:0] temp; 

always @ (X,Y)
begin
 acc=4'b0000;
 y=Y;
 x=X;
 q=1'b0;
 
for(i=0;i<4;i=i+1)
begin
 temp={y[0],q};  

 if (temp==2'b00|temp==2'b11)begin
  s={acc,y,q};
  s=(s>>>1);
  acc=s[8:5];
  y=s[4:1];
  q=s[0];
 end
 
 else if(temp==2'b10)begin
  acc=acc-x;
  s={acc,y,q};
  s=(s>>>1);
  acc=s[8:5];
  y=s[4:1];
  q=s[0];
 end
  
 else if(temp==2'b01)begin
   acc=acc+x;
   s={acc,y,q};
   s=(s>>>1);
   acc=s[8:5];
   y=s[4:1];
   q=s[0];
 end
//$display("[$display] s=%b acc=%b y=%b q=%b",s,acc,y,q);
end
end

assign Z={acc,y};
endmodule


Test Bench:

module booth_multiplier_tb();
 
    reg [3:0] X;
    reg [3:0] Y;
    wire [7:0] Z;
   
 booth_multiplier dut(.X(X),.Y(Y),.Z(Z));
 initial
 begin
  X=4'b0100;
  Y=4'b0111;
  #20
  X=4'b1111;
  Y=4'b1100;
  #20
  X=4'b1101;
  Y=4'b0110;
  #20
  X=4'b1001;
  Y=4'b1101;
  end
  initial #80 $finish;

endmodule