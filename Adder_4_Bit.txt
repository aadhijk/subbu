Code:

module four_bit_adder(
    input A0,
    input A1,
    input A2,
    input A3,
    input B0,
    input B1,
    input B2,
    input B3,
    input Cin,
    output S0,
    output S1,
    output S2,
    output S3,
    output Cout
    );
    wire C0,C1,C2;
    full_adder fa1(A0,B0,Cin,S0,C0);
    full_adder fa2(A1,B1,C0,S1,C1);
    full_adder fa3(A2,B2,C1,S2,C2);
    full_adder fa4(A3,B3,C2,S3,Cout);
endmodule

module full_adder(
    input a,
    input b,
    input c,
    output sum,
    output carry
    );
assign sum = a^b^c;
assign carry = (a&b)|(b&c)|(c&a);
endmodule


Test Bench:

module four_bit_adder_tb();

reg A0,A1,A2,A3,B0,B1,B2,B3,Cin;
four_bit_adder dut(.A0(A0),.A1(A1),.A2(A2),.A3(A3),.B0(B0),.B1(B1),.B2(B2),.B3(B3),.Cin(Cin),.S0(S0),.S1(S1),.S2(S2),.S3(S3),.Cout(Cout));

initial begin 
A0=1'b1;  A1=1'b0;  A2=1'b1;  A3=1'b0;
B0=1'b1;  B1=1'b1;  B2=1'b1;  B3=1'b1;
Cin=0;
#10

A0=1'b1;  A1=1'b1;  A2=1'b1;  A3=1'b1;
B0=1'b0;  B1=1'b0;  B2=1'b0;  B3=1'b0;
Cin=1;
#10
   
A0=1'b1;  A1=1'b1;  A2=1'b0;  A3=1'b0;
B0=1'b0;  B1=1'b0;  B2=1'b1;  B3=1'b1;
Cin=0;
#10
    
A0=1'b1;  A1=1'b0;  A2=1'b0;  A3=1'b0;
B0=1'b0;  B1=1'b0;  B2=1'b0;  B3=1'b1;
Cin=0;
#10
$finish;
end
endmodule