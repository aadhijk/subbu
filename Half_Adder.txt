Gate Level Implementation:

module half_adder(
    input a,
    input b,
    output sum,
    output carry
    );
xor (sum,a,b);
and (carry,a,b);
endmodule

Data Flow Level Implementation:

module half_adder(
    input a,
    input b,
    output sum,
    output carry
    );
assign sum=a^b;
assign carry=a&b;
endmodule


Behavioural Model Implementation:

module half_adder(
    input a,
    input b,
    output reg sum,
    output reg carry
    );
always @(a or b)
case({a,b})
2'b00: begin sum=0;carry=0;end
2'b01: begin sum=1;carry=0;end
2'b10: begin sum=1;carry=0;end
2'b11: begin sum=0;carry=1;end
endcase
endmodule

Test Bench:

module half_adder_tb();
reg a,b;
wire sum,carry;
half_adder dut(.a(a),.b(b),.sum(sum),.carry(carry));
initial begin
a=1'b0;b=1'b0;
#10
a=1'b0;b=1'b1;
#10
a=1'b1;b=1'b0;
#10
a=1'b1;b=1'b1;
#10
$finish;
end
endmodule